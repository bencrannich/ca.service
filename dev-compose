#! /bin/sh

## Helper script for running Compose commands with the correct set of YAML
## (and data) files for the default development environment

## This script must be run from the top-level source directory

## To use this script, simply invoke it as you would "docker compose", e.g.:
#
# ./dev-compose logs -f
#
# All configurable parameters are passed via environment variables (see below),
# and any arguments you specify are passed directly to Compose

## Environment variables you can set:
#
# Variable          Default value       Type      Description
#
# COMPOSE           docker compose      String    Compose command name
# CA_DEV_NAME       tsdev               String    Compose project name

COMPOSE=${COMPOSE:-'docker compose'}
CA_DEV_NAME=${CA_DEV_NAME:-'cadev'}

is_true() {
	case "$1" in
		1|YES|yes|true)
			return 0
			;;
	esac
	return 1
}

ensure_exists() {
	for file in "$@" ; do
		mkdir -p "$(dirname "${file}")"
		touch "${file}"
	done
}

mkdir -p dev/data

## dev/local.env is included for any environment overrides you want to
## apply - it's excluded from git and touched here only to guarantee
## that it exists

if ! [ -r dev/local.env ] ; then
	cat >dev/local.env <<EOF
# Use this file to apply any local environment variable overrides that
# should be passed to all containers
EOF
fi

if ! [ -r dev/local.yaml ] ; then
	cat >dev/local.yaml <<EOF
# This file is passed automatically to Compose when a development environment
# is used (e.g., via the top-level Makefile), but it is excluded from Git and any
# changes you make will not be overwritten. It is included last on the
# command-line, so you can use it to override any service or resource
# definitions (or add new ones)
version: "3.3"
EOF
fi

set -x
${COMPOSE} \
	--project-name "${CA_DEV_NAME}" \
	-f docker-compose.yaml \
	-f dev/overrides.yaml \
	-f dev/local.yaml \
	"$@"
